generator client {
  provider = "prisma-client-js"
  output   = "./generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User table for Better-Auth (authentication only)
model User {
  id            String    @id
  email         String    @unique
  emailVerified Boolean   @default(false)
  name          String
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  profile       Profile?
  accounts      Account[]
  sessions      Session[]

  @@map("user")
}

// Profile table for users logic (user data)
model Profile {
  id              String     @id @default(cuid())
  userId          String     @unique
  firstname       String
  lastname        String
  username        String     @unique
  phoneNumber     String
  profileImageUrl String?
  experience      String?
  biography       String?
  favoriteMusic   String?
  birthDate       DateTime
  isVerified      Boolean    @default(false)
  isDriverVerified  Boolean  @default(false)
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt

  user            User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  rides           UserRide[]

  @@map("profile")
}

model Ride {
  id                String     @id @default(cuid())
  startingAddress   String
  arrivalAddress    String
  departureCity     String
  arrivalCity       String
  departureDatetime DateTime
  arrivalDatetime   DateTime
  price             Int
  status            String
  availableSeats    Int
  vehicleId         String
  createdAt         DateTime   @default(now())
  updatedAt         DateTime   @updatedAt
  participants      UserRide[]
}

model UserRide {
  id        String   @id @default(cuid())
  profileId String
  rideId    String
  driver    Boolean
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  ride      Ride     @relation(fields: [rideId], references: [id], onDelete: Cascade)

  @@unique([profileId, rideId])
  @@index([profileId])
  @@index([rideId])
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}
